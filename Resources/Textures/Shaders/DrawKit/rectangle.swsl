// Copyright (C) 2025 Igor Spichkin

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

light_mode unshaded;

uniform highp vec4 fillColor;
uniform highp vec4 borderColor;
uniform highp vec4 insetColor;
// X, Y, WIDTH, HEIGHT
uniform highp vec4 rect;
// TopLeft, TopRight, BottomRight, BottomLeft
uniform highp vec4 rounding;
// Top, Right, Bottom, Left
uniform highp vec4 borderThickness;
// Top, Right, Bottom, Left
uniform highp vec4 insetThickness;

highp float sdf(in highp vec2 pos, in highp vec2 size, in highp vec4 rounding)
{
    rounding.zy = (pos.x > 0.0) ? rounding.zy : rounding.wx;
    rounding.z  = (pos.y > 0.0) ? rounding.z  : rounding.y;

    highp vec2 q = abs(pos) - size + rounding.z;

    return min(max(q.x, q.y), 0.0) + length(max(q, 0.0)) - rounding.z;
}

highp vec2 calcHalfSize(in highp vec4 thickness) {
    return vec2(thickness.y + thickness.w, thickness.x + thickness.z) / 2.0;
}

highp vec2 calcOffset(in highp vec4 thickness) {
    return vec2(thickness.y - thickness.w, thickness.x - thickness.z) / 2.0;
}

highp vec4 calcRounding(in highp vec4 thickness) {
    return vec4(
       min(thickness.w, thickness.x),
       min(thickness.x, thickness.y),
       min(thickness.y, thickness.z),
       min(thickness.z, thickness.w)
   );
}

void fragment() {
    highp vec2 coords = vec2(
        FRAGCOORD.x,
        1.0 / SCREEN_PIXEL_SIZE.y - FRAGCOORD.y
    );

    highp vec2 pos = rect.xy;
    highp vec2 size = rect.zw;

    vec2 borderHalfSize = calcHalfSize(borderThickness);
    vec2 borderOffset = calcOffset(borderThickness);
    vec4 borderRounding = calcRounding(borderThickness);

    vec2 insetHalfSize = calcHalfSize(insetThickness);
    vec2 insetOffset = calcOffset(insetThickness);
    vec4 insetRounding = calcRounding(insetThickness);

    highp vec2 nPos = coords - pos;

	highp float dFill = sdf(
	    nPos + borderOffset + insetOffset,
	    size - borderHalfSize - insetHalfSize,
	    rounding - borderRounding - insetRounding
    );
    highp float dInset = sdf(
        nPos + borderOffset,
        size - borderHalfSize,
        rounding - borderRounding
    );
    highp float dBorder = sdf(
        nPos,
        size,
        rounding
    );

    highp float wFill = 0.5 * fwidth(dFill);
    highp float wInset = 0.5 * fwidth(dInset);
    highp float wBorder = 0.5 * fwidth(dBorder);

    COLOR = mix(
        borderColor,
        vec4(0.0, 0.0, 0.0, 0.0),
        smoothstep(-wBorder, wBorder, dBorder)
    );
    COLOR = mix(
        insetColor,
        COLOR,
        smoothstep(-wInset, wInset, dInset)
    );
    COLOR = mix(
        fillColor,
        COLOR,
        smoothstep(-wFill, wFill, dFill)
    );
}
