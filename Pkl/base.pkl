module base

// Base types

typealias EntityUid = String;

typealias ProtoId = String;

typealias EntProtoId = String;

typealias LocId = String;

typealias ResPath = String(read("file:Resources\(this)") != null)

class Vector2i {
    x: Int
    y: Int
}

class Vector2 {
    x: Float
    y: Float
}

class Vector3 {
    x: Float
    y: Float
    z: Float
}

local const function IsHexColor(hex: String): Boolean = hex.startsWith("#") && (hex.length == 7 || hex.length == 9)

const function ColorRGB(r: UInt8, g: UInt8, b: UInt8): Color = ColorRGBA(r, g, b, 255)

const function ColorRGBA(r: UInt8, g: UInt8, b: UInt8, a: UInt8): Color = "#\(r.toRadixString(16))\(g.toRadixString(16))\(b.toRadixString(16))\(a.toRadixString(16))"

typealias Color = String(IsHexColor(this))

typealias Angle = Int

typealias FixedPoint2 = Float

// Prototype

abstract class Component {
    fixed type: String
    id: String
    `abstract`: Boolean?
}

abstract class Prototype {
    fixed type: String
    id: String
}

typealias ComponentRegistry = Listing<Component>

content: Listing<Prototype|Component> = new {

}

output {
    value = content
    renderer = new YamlRenderer {
        converters {
            [Vector2i] = (v) -> "\(v.x),\(v.y)"
            [Vector2] = (v) -> "\(v.x),\(v.y)"
            [Vector3] = (v) -> "\(v.x),\(v.y),\(v.z)"
        }
    }
}
