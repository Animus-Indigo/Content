// Copyright (C) 2025 Igor Spichkin

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published
// by the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.

// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

using Content.Client.UIKit;
using Content.Shared.Localizations;
using Content.Shared.UIKit;
using Robust.Client.Animations;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Animations;
using Robust.Shared.Utility;


namespace Content.Client.GameBar.UI;


[GenerateTypedNameReferences]
public sealed partial class GameBar : UIWidget
{
    private const string ChangeStyleAnimationKey = "ChangeStyleAnimationKey";

    private readonly GameBarPopup     _popup = new();
    private readonly RectBox       _panel;
    private          LocalizedString? _currentCategory;

    [Animatable]
    public Color BackgroundColor
    {
        get => _panel.Color;
        set => _panel.Color = value;
    }

    [Animatable]
    public Color BorderColor
    {
        get => _panel.Border.Color;
        set => _panel.Border = _panel.Border with { Color = value, };
    }

    [Animatable]
    public Color InsetBorderColor
    {
        get => _panel.Inset.Color;
        set => _panel.Inset = _panel.Inset with { Color = value, };
    }

    public event Action<LocalizedString, LocalizedString>? ItemPressed;

    public GameBar()
    {
        RobustXamlLoader.Load(this);

        var defaultStyle = GameBarStyle.Default;

        GlobalMenuPanel.PanelOverride = _panel = new()
        {
            Border = new(defaultStyle.Border, new(1.0f)),
            Inset  = new(defaultStyle.InsetBorder, new(1.0f)),
            Color  = defaultStyle.Background
        };

        SetStyle(defaultStyle);

        _popup.OnPopupOpen += () =>
        {
            UserInterfaceManager.ModalRoot.AddChild(_popup);
        };
        _popup.OnPopupHide += () =>
        {
            _currentCategory = null;
            UserInterfaceManager.ModalRoot.RemoveChild(_popup);
        };
        _popup.ItemClicked += item =>
        {
            DebugTools.AssertNotNull(_currentCategory);

            ItemPressed?.Invoke(_currentCategory!.Value, item);
            _popup.Close();
        };
    }

    public void SetStyle(GameBarStyle style)
    {
        if (HasRunningAnimation(ChangeStyleAnimationKey))
            StopAnimation(ChangeStyleAnimationKey);

        var currentPanel = (RectBox) GlobalMenuPanel.PanelOverride!;

        var anim = new Animation
        {
            Length = TimeSpan.FromSeconds(AnimationConstants.ControlFadeInDuration),
            AnimationTracks =
            {
                new AnimationTrackControlProperty
                {
                    Property = nameof(BackgroundColor),
                    KeyFrames =
                    {
                        new(currentPanel.Color, 0.0f),
                        new(style.Background, AnimationConstants.ControlFadeInDuration)
                    }
                },
                new AnimationTrackControlProperty
                {
                    Property = nameof(BorderColor),
                    KeyFrames =
                    {
                        new(currentPanel.Border.Color, 0.0f),
                        new(style.Border, AnimationConstants.ControlFadeInDuration)
                    }
                },
                new AnimationTrackControlProperty
                {
                    Property = nameof(InsetBorderColor),
                    KeyFrames =
                    {
                        new(currentPanel.Inset.Color, 0.0f),
                        new(style.InsetBorder, AnimationConstants.ControlFadeInDuration)
                    }
                }
            }
        };

        PlayAnimation(anim, ChangeStyleAnimationKey);
    }

    public void Populate(IReadOnlyList<Category> categories)
    {
        Clear();

        foreach (var category in categories)
        {
            var categoryButton = new GameBarCategoryButton(category.IsIcon)
            {
                Text = category.Name.ToString()
            };

            categoryButton.OnButtonDown += ev => OnCategoryPressed(ev, category);

            MenuContainer.AddChild(categoryButton);
        }
    }

    private void Clear() => MenuContainer.RemoveAllChildren();

    private void OnCategoryPressed(BaseButton.ButtonEventArgs ev, Category category)
    {
        _currentCategory = category.Name;

        var topLeft = ev.Button.GlobalRect.BottomLeft;

        topLeft.Y += 8;
        topLeft.X += 8;

        _popup.SetItems(category.Items);
        _popup.Open(UIBox2.FromDimensions(topLeft, new()));
    }

    public record struct Category(LocalizedString Name, List<GameBarPopup.Item> Items, bool IsIcon);
}
